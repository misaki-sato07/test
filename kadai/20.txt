【目的】
　マルチスレッドによる並列化について学ぶ
　ファイルツリーの再帰的走査を経験する
　低レイヤ関連のワードを調べることでバイナリアンの世界へいざなう



【背景】
　「宇宙海賊派遣サービス」を運営するゴー☆ジャス社は、先月セキュリティインシデントによる情報漏えい事件が起きた。
　ネットワーク機器のログには外部から侵入された形跡はなく、何らかの原因で機密情報を保存している
　コンピュータである「マダガスカル」がウイルスに感染し、外部に情報が流出したと結論づけられた。
　社内インフラ担当が実施したパケット解析結果によれば、機密情報が外部に流出する1週間前から
　定期的に「マダガスカル」が外部のサーバに対して「KimiNoHeartNi」という謎の文字列のHTTPリクエストを送信して
　おり、情報流出が起きたときのみ外部のサーバから「Revolution!!!!!!」という文字列のレスポンスがあったことがわかった。
　以上のことから「マダガスカル」が感染しているウイルスは外部サーバとやりとりし「Revolution!!!!!!」という
　コマンドをトリガーに動作することが予測される。
　サーバ管理者である「コロンビアくん」はウイルス除去を上司から命じられたが、社内にはWindows用のウイルスソフト
　しかなくLinuxで動作している「マダガスカル」では動作しないことがわかった。
　
　
　
【問題】
　コロンビアくんに変わって「マダガスカル」内に存在するウイルスを除去するためのツールを作成してください。
　本ツールのusageは以下とします。プログラム名はセンスに任せます。
　./program -p search-root-path -t max-thread-number
　
　（１）ウイルスの検出方法について
　　　　ウイルスの特徴より、実行形式ファイル内に「KimiNoHeartNi」というマジックナンバーがあると考えられます。
　　　　stringsコマンドがバイナリファイルから文字列を探索する手法を参考にマジックナンバーを内部に持つ
　　　　実行形式ファイルを探索してください。
　　　　stringsコマンドは内部でlibbfdというライブラリを使うことで実行形式ファイルの場合はデータセグメント
　　　　のみを文字列の探索対象としていますが、今回はそこまでやる必要はありません。
　
　（２）ファイル探索について
　　　　探索開始ディレクトリは、引数として与えられたディレクトリとします。
　　　　また今回のウイルスは状況的に「実行形式ファイル」の可能性が高いと報告を受けているため、
　　　　マジックナンバーのチェックは「実行形式ファイル」のみを対象にしてください。
　
　（３）実行形式ファイル判別方法について
　　　　Linux（その他の多くのUNIX OSも）の実行形式ファイルはELFというファイルフォーマットになっており、
　　　　ELFではファイルの先頭52バイトがヘッダになっています。
　　　　ELFヘッダにはプログラムのエントリポイント（開始地点。実はCプログラムはmainから処理が開始されるわけではない）の
　　　　アドレスやどのCPUアーキテクチャ向けの実行形式になっているのかなど様々な情報が詰められています。
　　　　HULFT開発においてELFの知識が必要になることはまずないので、これ以上知りたい場合は各自で調べてみてください。
　　　　今回の問題においては、ELFヘッダの先頭4バイト（つまりファイル先頭4バイト）が「0x7f 0x45 0x4c 0x46」であれば、
　　　　ELF形式になっていると判定してください。
　
　（４）ファイルツリーの再帰走査について
　　　　ファイルツリーの再帰探索処理はftwあるいはnftwを使用してください。
　　　　opendir/readdirを再帰的に呼ぶやり方はコードが複雑になるため今回のようなケースには推奨されません。
　　　　問題とは関係ないですが、リストだけであればscandirという関数もあるため存在は認知しておいてください。
　
　（５）マジックナンバーチェック並列化について
　　　　実行形式ファイルが見つかるたびに、逐次処理でマジックナンバーをチェックするとプログラムの実行時間が問題になります。
　　　　以下の２つの種類のスレッドを作成することで、この性能問題を解決してください。
　　　　
　　　　　1. 実行形式ファイルの走査を行い、2のスレッドの生成、終了待ちを行うメインスレッド
　　　　　2. マジックナンバーのチェック処理を行うサブスレッド
　　　　
　　　　2のサブスレッドの数は引数で与えられるものとします。
　　　　また、サブスレッドがマジックナンバーを見つけた場合は、すでに起動しているサブスレッドの処理を途中で
　　　　打ち切る処理も実装してください。
　　　　
　　　　（ちょっと難しいのでヒント）
　　　　1. スレッドの生成はpthread_create()でできます。
　　　　2. 終了待ちの実装は「条件変数」という仕組みを使うことで実装可能です。
　　　　3. またスレッドの途中停止はpthread_cancel()を使うことで実現できます。
　
　（６）実行結果について
　　　　探索成功時は、マジックナンバーを持つファイルのパスを出力してください。
　　　　この時、コマンドの実行結果は0とします。
　　　　探索に失敗した場合は、実行結果1で終了してください。


テストのやり方について追記
プログラムの構造に関するヒントを記載（Producer-Consumerモデル）

